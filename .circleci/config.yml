version: 2

# Each job represents a phase in the Build-Test-Deploy process
jobs:

  build:
    # This is the directory into which our code will be checked out, and this path will be used as the default working directory for the rest of the job
    working_directory: ~/code

  before_script:
    - mkdir $HOME/.android # For sdkmanager configs
    - echo 'count=0' > $HOME/.android/repositories.cfg # Avoid warning
    - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS_REV}.zip
    - mkdir $PWD/android-sdk-linux
    - unzip -qq android-sdk.zip -d $PWD/android-sdk-linux
    - export ANDROID_HOME=$PWD/android-sdk-linux
    - export ANDROID_NDK_HOME=$ANDROID_HOME/ndk-bundle # Remove if you don't need NDK
    - export PATH=$PATH:$ANDROID_HOME/platform-tools/:$ANDROID_NDK_HOME
    - echo y | $ANDROID_HOME/tools/bin/sdkmanager --update
    - echo y | $ANDROID_HOME/tools/bin/sdkmanager 'tools'
    - echo y | $ANDROID_HOME/tools/bin/sdkmanager 'platform-tools'
    - echo y | $ANDROID_HOME/tools/bin/sdkmanager 'build-tools;'$ANDROID_BUILD_TOOLS
    - echo y | $ANDROID_HOME/tools/bin/sdkmanager 'platforms;android-'$ANDROID_COMPILE_SDK
    - echo y | $ANDROID_HOME/tools/bin/sdkmanager 'extras;android;m2repository'
    - echo y | $ANDROID_HOME/tools/bin/sdkmanager 'extras;google;google_play_services'
    - echo y | $ANDROID_HOME/tools/bin/sdkmanager 'extras;google;m2repository'
    - echo y | $ANDROID_HOME/tools/bin/sdkmanager 'cmake;'$ANDROID_CMAKE_REV
    - echo y | $ANDROID_HOME/tools/bin/sdkmanager 'ndk-bundle' # Remove if you don't need NDK
    - chmod +x ./gradlew


    # Container images
    docker:
      - image: circleci/android:api-28-alpha

    environment:
      JVM_OPTS: -Xmx3200m

    branches:
      only:
        - master
        - develop

    steps:
      # We start with checkout so we can operate on the codebase.
      - checkout

      # Pull down the cache, if present
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

      #- run:
      #   name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
      #   command: sudo chmod +x ./gradlew

      # Pull down the projectâ€™s dependencies
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies

      # Store the dependencies in order to speed things up for next time
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

      # Run the unit tests, and run the built in linting tools to check your code for style issues
      - run:
          name: Run Tests
          command: ./gradlew lint test

      # Builds develop and release APK
      - run:
          name: Build debug APK and release APK
          command: |
            if [ "$CIRCLE_BRANCH" == "master" ];
            then
              ./gradlew :app:assembleRelease
            fi

            ./gradlew :app:assembleDebug
            ./gradlew :app:assembleAndroidTest -DtestBuildType=debug

      - store_artifacts:
          path: app/build/reports
          destination: reports

      - store_test_results:
          path: app/build/test-results

      - store_artifacts:
          path: app/build/outputs/apk/
          destination: /apk/

      # Creates json file from string saved defined in system variables of CircleCI
      - run:
          name: Store Google Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json

      # Authorises Google Cloud using the Firebase Service Key JSON
      - run:
          name: Authorize gcloud and set config defaults
          command: |
            sudo gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            sudo gcloud --quiet config set project truebil-auction-app

      # Begins running test cases on Firebase Test Lab
      - run:
          name: Test with Firebase Test Lab
          command: |
            buildAPKPath=app/build/outputs/apk/debug/app-debug.apk
            testAPKPath=app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk

            sudo gcloud firebase test android run --type instrumentation --app $buildAPKPath --test $testAPKPath

      # Copies Latest Firebase Test Results from Google Cloud
      - run:
          name: Install gsutil dependency and copy test results data
          command: |
            sudo pip install -U crcmod
            mkdir firebase
            sudo gsutil -m cp -r -U `sudo gsutil ls gs://test-lab-w38qkw1sw94p2-jmvzrxhj0tynk | tail -1` ~/code/firebase/ | true

      # Stores Firebase Test Results under Artifacts
      - store_artifacts:
          path: firebase/
          destination: firebase/

      # Sends APK file to Slack using Slack APP Token
      - run:
          name: Upload to Slack
          command: |
            export GIT_COMMIT_DESC=$(git log --format=oneline -n 1 | sed -E 's/^[^ ]+ (.*)$/\1/g')

            APK_FILE_NAME_ARRAY=`ls app/build/outputs/apk/debug/ | grep apk`
            APK_FILE_NAME=${APK_FILE_NAME_ARRAY[0]}
            APK_FILE_PATH=@app/build/outputs/apk/debug/${APK_FILE_NAME}
            curl -F file=$APK_FILE_PATH -F channels=$SLACK_CHANNEL -F token=$SLACK_API_TOKEN -F title="${APK_FILE_NAME} | ${CIRCLE_PROJECT_REPONAME} | ${CIRCLE_BRANCH} | ${GIT_COMMIT_DESC}"  https://slack.com/api/files.upload

            if [ "$CIRCLE_BRANCH" == "master" ];
            then
              APK_FILE_NAME_ARRAY=`ls app/build/outputs/apk/release/ | grep apk`
              APK_FILE_NAME=${APK_FILE_NAME_ARRAY[0]}
              APK_FILE_PATH=@app/build/outputs/apk/release/${APK_FILE_NAME}
              curl -F file=$APK_FILE_PATH -F channels=$SLACK_CHANNEL -F token=$SLACK_API_TOKEN -F title="${APK_FILE_NAME} | ${CIRCLE_PROJECT_REPONAME} | ${CIRCLE_BRANCH} | ${GIT_COMMIT_DESC}"  https://slack.com/api/files.upload
            fi